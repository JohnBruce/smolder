#!/usr/bin/perl

use strict;
use warnings;

=head1 NAME

smolder_add_developer - add a new developer to Smolder

=head1 SYNOPSIS

  bin/smolder_add_developer --username foo --email foo@bar.com --password s3cr3t

=head1 DESCRIPTION

This script will create a new Smolder developer.

=head1 OPTIONS

=head2 Required

=over

=item username

The developer's user name. It's also their login.

=item email

The email address to which notifications will be sent.

=item password

The developer's password to use when logging in.

=back

=head2 Optional

=item fname

The developer's first name.

=item lname

The developer's last name.

=item admin

A boolean indicating whether or not this person is an admin of the installtion

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;

BEGIN {

    # Find a SMOLDER_ROOT based on path to bin
    my @dir = splitdir( canonpath($RealBin) );
    $ENV{SMOLDER_ROOT} ||= catdir( @dir[ 0 .. $#dir - 1 ] );

    # use SMOLDER_ROOT/lib for modules
    my $lib = catdir( $ENV{SMOLDER_ROOT}, "lib" );
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    # load Smolder::Conf
    eval { require Smolder::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Smolder.

Error message:

$@

######################################################################
END
}

use Smolder::DB::Developer;
use Smolder::DB::Preference;
use Smolder::DBPlatform;
use Getopt::Long;
use Email::Valid;
use Pod::Usage;

my ($v, $h, $man, $username, $pw, $email, $fname, $lname, $admin);

GetOptions(
    'verbose!'   => \$v,
    'help!'      => \$h,
    'man!'       => \$man,
    'username=s' => \$username,
    'password=s' => \$pw,
    'email=s'    => \$email,
    'fname=s'    => \$fname,
    'lname=s'    => \$lname,
    'admin!'     => \$admin
) || pod2usage();

if ($h) {
    pod2usage(
        -exitval => 0,
        -verbose => 1,
    );
} elsif ($man) {
    pod2usage(
        -exitval => 0,
        -verbose => 2,
    );
}

# check for the required stuff
whine("You must provide a username.") unless $username;
whine("You must provide a email password.") unless $pw;
whine("You must provide an email address.") unless $email;
whine("$email is not a valid email address.") unless Email::Valid->address($email);

my $DB_PLATFORM = Smolder::DBPlatform->load();

my %create_data = (
    username => $username,
    password => $pw,
    email    => $email,
);
$create_data{fname} = $fname if $fname;
$create_data{lname} = $lname if $lname;
$create_data{admin} = 1 if $admin;

if( $v ) {
    require Data::Dumper;
    print "Creating developer with data " . Data::Dumper::Dumper(\%create_data) . "\n";
}

my ($dev, $pref);
eval { 
    my $pref = Smolder::DB::Preference->create();
    $create_data{preference} = $pref;
    $dev = Smolder::DB::Developer->create(\%create_data);
    $dev->update();
};
if( $@ ) {
    if( $DB_PLATFORM->unique_failure_msg($@) ) {
        print "Username $username is already in use by another developer.\n";
    } else {
        print "Could not create developer! $@\n";
    }
    exit(0);
    $pref->delete if $pref;
} elsif( $v ) {
    print "Developer #$dev successfully created.\n";
}


sub whine {
    print "$_[0]\n";
    exit(0);
}


