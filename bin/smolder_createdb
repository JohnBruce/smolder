#!/usr/bin/perl 
use warnings;
use strict;

=pod

=head1 NAME

smolder_createdb

=head1 SYNOPSIS

   smolder_createdb --DBPlatform MySQL --DBHost localhost --AdminDBPass foobar --dry_run

=head1 DESCRIPTION

Creates databases using information in F<smolder.conf>.

=head1 OPTIONS

The script takes the following options:

=over

=item --destroy

By default the script only creates databases if they do not already
exist.  This option tells smolder_createdb to destroy the database
first.  You will be prompted to confirm your dangerous request.

=item --no_create

Do not create new databases.  Can be useful if used in conjunction with
--destroy.

=item --no_prompt

Do not prompt user for confirmation on any events

=item --AdminDBPass

The admin password for the database.

=item --DBPlatform

The Database platform to use. Please see L<docs/database_support.pod>
for details about valid databases.
If not specified, will retrieve from F<smolder.conf>.

=item --DBHost

The host where the database is running. If not specified, will retrieve from F<smolder.conf>.

=item --DBName

The name of the database. If not specified, will retrieve from F<smolder.conf>.

=item --DBPass

The password for the C<DBUser> of the database. 
If not specified, will retrieve from F<smolder.conf>.

=item --IPAddress

IP address of host connecting to the DB. (Usually this matchine). By default we
use the value of C<ApacheAddr> from <smolder.conf>, which defaults to
C<127.0.0.1>. Connections to the smolder database will be allowed only from
this IP address.

=item --verbose

Gives you the play-by-play.

=item --help

=item --man

=back

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;

BEGIN {

    # Find a SMOLDER_ROOT based on path to bin
    my @dir = splitdir( canonpath($RealBin) );
    $ENV{SMOLDER_ROOT} ||= catdir( @dir[ 0 .. $#dir - 1 ] );

    # use $SMOLDER_ROOT/lib for modules
    my $lib = catdir( $ENV{SMOLDER_ROOT}, "lib" );
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    # load Smolder
    eval { require Smolder };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Smolder.

Error message:

$@

######################################################################
END
}

use Term::Prompt qw(prompt);
use Smolder::Conf qw(InstallRoot DBName DBUser DBPass DBHost DBPlatform ApacheAddr);
use Smolder::DBPlatform;
use Getopt::Long;
use Pod::Usage;

my $help           = 0;
my $man            = 0;
my $admin_password = '';
my $ip_address     = ApacheAddr;
my $db_platform    = DBPlatform;
my $db_host        = DBHost;
my $db_name        = DBName;
my $db_user        = DBUser;
my $db_pass        = DBPass;
my $destroy        = 0;
my $no_prompt      = 0;
my $no_create      = 0;
my $verbose        = 0;
my @files;

GetOptions(
    'help'          => \$help,
    'man'           => \$man,
    'verbose'       => \$verbose,
    'destroy'       => \$destroy,
    'no_prompt'     => \$no_prompt,
    'no_create'     => \$no_create,
    'file=s'        => \@files,
    'AdminDBPass=s' => \$admin_password,
    'DBPlatform=s'  => \$db_platform,
    'DBName=s'      => \$db_name,
    'DBUser=s'      => \$db_user,
    'DBPass=s'      => \$db_pass,
    'DBHost=s'      => \$db_host,
    'IPAddress=s'   => \$ip_address,
  )
  or pod2usage(2);
pod2usage(1) if $help;
pod2usage( -verbose => 2 ) if $man;

$db_platform       = Smolder::DBPlatform->load($db_platform);
my $admin_verified = $db_platform->verify_admin(
    passwd  => $admin_password,
    host    => $db_host,
    db_name => $db_name,
);

# make sure the DB has what it needs
unless( $admin_verified ) {
    die("Invalid AdminDBPass '$admin_password' or could not connect to the DB!\n");
}

# leave no database standing
if ($destroy) {
    # make sure they really meant --destroy
    if (not $no_prompt) {
        exit 1
          unless prompt(
            "y",
            "This program will drop and recreate Smolder the database \n"
              . "for this installation.\n\nAre you sure you want to proceed?",
            "y/n",
            "y"
          );
    }

    print STDERR "Dropping database '$db_name'...\n" if( $verbose );
    eval {
        $db_platform->drop_database(
            admin_passwd => $admin_password,
            host         => $db_host,
            db_name      => $db_name,
        );
    };
    die "Couldn't drop database $db_name: $@" if( $@ );
}

exit 0 if $no_create;

# skip if database exists
print "Creating Database $db_name\n" if( $verbose );
eval {
    $db_platform->create_database(
        admin_passwd => $admin_password,
        host         => $db_host,
        db_name      => $db_name,
    );
};
die "Couldn't create database $db_name: $@" if( $@ );
print "Creating DB User $db_name to have access to Database $db_name\n" if( $verbose );
eval{
    $db_platform->create_user(
        admin_passwd => $admin_password,
        db_name      => $db_name,
        host         => $db_host,
        user         => $db_user,
        passwd       => $db_pass,
    );
};
die "Couldn't grant access to $db_name: $@" if( $@ );

# load all sql files as the DBUser
my $create_sql_dir = $db_platform->sql_create_dir();
@files = ( 
    glob("$create_sql_dir/*.sql"), 
    catfile($ENV{SMOLDER_ROOT}, 'sql', 'insert.sql'), 
) unless @files;
foreach my $file (@files) {
    print STDERR "Loading SQL for '$db_name' from $file...\n" if( $verbose );
    eval {
        $db_platform->run_sql_file(
            user    => $db_user,
            passwd  => $db_pass,
            host    => $db_host,
            file    => $file,
            db_name => $db_name,
        );
    };
    die "Couldn't load SQL file $file! $@" if( $@ );
}

# Set the db_version
my $version = $Smolder::VERSION;
print "Setting db_version to $version...\n" if( $verbose );
my $dbh = $db_platform->dbh(
    user    => $db_user,
    passwd  => $db_pass,
    db_name => $db_name,
    host    => $db_host,
);
eval { 
  $dbh->do("UPDATE db_version set db_version=$version");
};
die "Could not update db_version! $@" if( $@ );
