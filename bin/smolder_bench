#!/usr/bin/perl
use warnings;
use strict;

=pod

=head1 NAME

smolder_bench

=head1 SYNOPSIS

To run the benchmark scripts in F<bench/> and record the output to F<bench.out>:

  smolder_bench --run run_name

To see a comparison of two specific benchamark runs, named 'mysql3'
and 'mysql4':

  smolder_bench --compare mysql3 --compare mysql4

Passing just one name will show an analysis of the named run against
the most recent run:

  smolder_bench --compare time_to_beat

=head1 DESCRIPTION

This script allows you to create and analyze benchmark data.
You can compare up to 2 bench runs at a time.

The values displayed will be in iterations per second.  Positive
change percentages indicate performance increase in the second run
(i.e., more iterations per second).  Negative percentages indicate a
decrease in performance from run to run.

=head1 TODO

Use Text::Wrap to deal with long module and benchmark names?

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;

BEGIN {

    # Find a SMOLDER_ROOT based on path to bin
    my @dir = splitdir( canonpath($RealBin) );
    $ENV{SMOLDER_ROOT} ||= catdir( @dir[ 0 .. $#dir - 1 ] );

    # use SMOLDER_ROOT/lib for modules
    my $lib = catdir( $ENV{SMOLDER_ROOT}, "lib" );
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    # load Smolder::Conf
    eval { require Smolder::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Smolder.

Error message:

$@

######################################################################
END
}

use Smolder::Conf qw(InstallRoot);
use Getopt::Long;
use Pod::Usage;
use Text::Wrap;

my ( $help, $man, @compare, $run );
GetOptions(
    'help'      => \$help,
    'man'       => \$man,
    'compare=s' => \@compare,
    'run'       => \$run,
  )
  or pod2usage(2);
pod2usage(1) if $help;
pod2usage( -verbose => 2 ) if $man;

# if we want to make a bench run
if ($run) {

    # run the scripts in /bench
    # else we want to compare
} else {

    # open the benchmark file and find offests for all benchmark sets.
    # This means scanning the file twice, but loading all the data into
    # memory is a waste of time since we'll only need two sets.
    my %bench_off;
    my @sets;
    open( BENCH, catfile( InstallRoot, 'bench.out' ) );
    while (<BENCH>) {
        next unless /^!/;
        my ($name) = /!\t(.*)/;
        $bench_off{$name} = tell(BENCH);
        push( @sets, $name );
    }

    die "Sorry, you need to have at least two benchmark sets in bench.out to use --compare.\n"
      unless @sets >= 2;

    # determine which sets to examine
    my ( $set1, $set2 );
    if ( scalar @compare == 2 ) {
        $set1 = $compare[0];
        $set2 = $compare[1];
    } elsif ( scalar @compare == 1 ) {
        $set1 = $compare[0];
        $set2 = $sets[-1];
    } elsif ( scalar @compare == 0 ) {
        $set1 = $sets[-2];
        $set2 = $sets[-1];
    } else {
        print "Wrong number of arguments!\n";
        pod_usage(1);
    }

    # make sure they're available
    die "Unable to find '$set1' in bench.out."
      unless exists $bench_off{$set1};
    die "Unable to find '$set2' in bench.out."
      unless exists $bench_off{$set2};

    # load the data sets
    my %data;

    # load from set
    seek( BENCH, $bench_off{$set1}, 0 ) or die $!;
    while (<BENCH>) {
        last unless /^-/;
        chomp;
        my ( undef, $module, $name, $count, $time ) = split( /\t/, $_, 5 );
        $data{$module}{$name} = [ $count / $time ];
    }

    # load to set
    seek( BENCH, $bench_off{$set2}, 0 ) or die $!;
    while (<BENCH>) {
        last unless /^-/;
        chomp;
        my ( undef, $module, $name, $count, $time ) = split( /\t/, $_, 5 );
        if ( exists( $data{$module}{$name} ) ) {

            # add to reading
            $data{$module}{$name}[1] = $count / $time;
        } else {

            # missing in from set
            $data{$module}{$name}[0] = undef;
            $data{$module}{$name}[1] = $count / $time;
        }
    }

    # done loading data
    close(BENCH);

    # print out header
    print <<END;
    
############################################################################

 Smolder Benchark Analysis

 Benchmark Run 1:    $set1
 Benchmark Run 2:    $set2

############################################################################

            Module |              Benchmark |   Run 1 |   Run 2 |   Change
 -------------------------------------------------------------------------
END

    # print data, and collect total info
    my $total        = 0;
    my $total_points = 0;
    foreach my $module ( sort keys %data ) {
        my $first = 1;
        foreach my $name ( sort keys %{ $data{$module} } ) {
            my ( $run1, $run2 ) = @{ $data{$module}{$name} };
            my $change;
            if ( defined $run1 and defined $run2 ) {
                if ( $run1 > $run2 ) {
                    $change = 0 - ( ( $run1 - $run2 ) / $run1 ) * 100;
                } else {
                    $change = ( ( $run2 - $run1 ) / $run2 ) * 100;
                }
                $total += $change;
                $total_points++;
                if ( $change >= 0 ) {
                    $change = sprintf( "+ %2d%%", $change );
                } else {
                    $change = sprintf( "- %2d%%", -$change );
                }
            } else {
                $change = 'N/A';
            }
            $run1 = defined $run1 ? sprintf( "%d", $run1 ) : "missing";
            $run2 = defined $run2 ? sprintf( "%d", $run2 ) : "missing";

            # print data lines
            printf( <<END, ( $first ? $module : "" ), $name, $run1, $run2, $change );
 %17s | %22s | %7s | %7s | %8s
END
            $first = 0;
        }
    }

    # print total
    if ( $total >= 0 ) {
        $total = sprintf( "+ %2d%%", $total / $total_points );
    } else {
        $total = sprintf( "- %2d%%", -( $total / $total_points ) );
    }
    printf( <<END, $total );

                                                            Average Change
 -------------------------------------------------------------------------
                                                                     %4s


END
}

exit(0);
