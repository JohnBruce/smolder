#!/usr/bin/env perl

use strict;
use warnings;

=pod

=head1 NAME

smolder_test

=head1 SYNOPSIS

    ./bin/smolder_test 

    ./bin/smolder_test --verbose

    ./bin/smolder_test --files t/

    ./bin/smolder_test --tap-archive

=head1 DESCRIPTION

Script used to run the Smolder tests and output either to the screen
using the standard L<Test::Harness> format or create an archive of the
test run's TAP output.

=cut

use Config;
use Getopt::Long;
use FindBin qw($RealBin);
use File::Spec::Functions qw(catdir catfile splitdir);

BEGIN {

    # Find a SMOLDER_ROOT based on path to bin
    my @dir = splitdir($RealBin);

    #remove any blank elements on the end of the @dir
    pop(@dir) while ( !$dir[$#dir] );
    $ENV{SMOLDER_ROOT} ||= catdir( @dir[ 0 .. $#dir - 1 ] );

    # use $SMOLDER_ROOT/lib for modules
    my $lib = catdir( $ENV{SMOLDER_ROOT}, "lib" );
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    eval { require Smolder::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Smolder.

Error message:

$@

######################################################################
END

    unshift( @INC,
        catfile( $FindBin::Bin, '..', 'lib' ),
        catfile( $FindBin::Bin, '..', 'lib', $Config{archname} ) );
}

use Smolder::Script;
use Smolder::Conf qw(InstallRoot);
use Test::Harness;
use IO::Scalar;
use Pod::Usage;
use File::Find;

$ENV{HARNESS_ACTIVE} = 1;

=head1 OPTIONS

=over

=item verbose

The output of the test should be verbose. This is different from the
C< quiet > option since it just affects how L<Test::Harness> runs the
tests. By default this option is false.

    ./bin/smolder_test --verbose

=item quiet

Surpress any normal output from the different scripts that it uses, or
any normal output it may emit itself. This will not silence fatal errors.
By default this option is false.

    ./bin/smolder_test --quiet

=item tap-archive

This options tells the script to create an archive file of the TAP ouput
instead of the normal L<Test::Harness> style report. The resulting file
will be named F<smolder_test_run.tar.gz>.

=item files

This is a comma-delimited list of files (relative to the B<InstallRoot>
root) that will be tested.  By default this will be every file in the t/
dir (and all subdirs or t/) that has a '.t' extension.

    ./bin/smolder_test --files 't/control/*'

    ./bin/smolder_test --files t/control/login.t

=back

=cut

# default options
my $verbose   = 0;
my $quiet     = 0;
my $archive   = 0;
my @testfiles = ();
my $help      = 0;
my $man       = 0;

GetOptions(
    'verbose!'     => \$verbose,
    'quiet!'       => \$quiet,
    'files=s'      => \@testfiles,
    'testfiles=s'  => \@testfiles,
    'test_files=s' => \@testfiles,
    'help!'        => \$help,
    'man!'         => \$man,
    'tap-archive'  => \$archive,
) || pod2usage();

if ($help) {
    pod2usage(
        -exitval => 0,
        -verbose => 1,
    );
} elsif ($man) {
    pod2usage(
        -exitval => 0,
        -verbose => 2,
    );
}

my $junk     = '';
my $junk_err = '';

# if we want to be quite then surpress printing to STDOUT
if ($quiet) {
    tie( *STDOUT, 'IO::Scalar', \$junk );
    tie( *STDERR, 'IO::Scalar', \$junk_err );
}

my $root = InstallRoot();

# go the the Smolder root
print_header("Changing into Smolder Root $root");
chdir($root)
  or die "Could not change into $root directory! $!";

# now run the tests
print_header("Running Tests");

# if we don't have anything in tests
if ( !scalar(@testfiles) ) {
    # do a depth-first search on the 't' directory to find all of the files
    find(
        sub {
            if ( $_ =~ /\.t$/ ) {
                push( @testfiles, $File::Find::name );
            }
        },
        ,
        't',
    );
} else {

    # split on commas
    @testfiles = split( /,/, join( ',', @testfiles ) );

    # now expand any globs
    @testfiles = map { glob($_) } @testfiles;
}

# if we have aaa_dbcount and zzz_dbcount in the list, shuffle them to the
# front and back respectively
my ($file) = grep( /aaa_dbcount/, @testfiles );
@testfiles = grep( !/aaa_dbcount/, @testfiles );
unshift @testfiles, $file if $file;

($file) = grep( /zzz_dbcount/, @testfiles );
@testfiles = grep( !/zzz_dbcount/, @testfiles );
push @testfiles, $file if $file;

# if we want the TAP archive
if ($archive) {
    create_tap_archive(\@testfiles);
} else {
    # else we just want to run normal Test::Harness tests
    $Test::Harness::Verbose = $verbose;
    eval { runtests(@testfiles) };
}

if ($quiet) {
    untie(*STDOUT);
    untie(*STDERR);
}

sub print_header {
    my $header = shift;

    if ( !$quiet && $verbose ) {

        # if we have the modules available
        print "\n";
        print '#' x 60;
        print "\n#    $header    \n";
        print '#' x 60;
        print "\n\n";
    }
}

sub create_tap_archive {
    my $files = shift;
    require Archive::Tar;
    require YAML;
    require File::Temp;
    require File::Basename;
    require Cwd;

    # create a an archive to put the TAP files into
    my $temp_dir = File::Temp::tempdir();
    my $archive = Archive::Tar->new();

    my %meta_info = (
        file_order => $files,
        start_time => time(),
    );
    foreach my $f (@$files) {
        my $basename = File::Basename::basename($f, '.t');
        my $destination = catfile($temp_dir, "$basename.tap");
        my $cmd = "$^X $f 2>&1 > $destination";
        print "Capturing output of $f into $basename.tap\n" if $verbose;
        system($cmd) == 0
            or warn "Could not run command $cmd: $!";
    }

    # create the meta.yml file
    $meta_info{stop_time} = time();
    open(my $meta_fh, '>', catfile($temp_dir, 'meta.yml'))
       or die "Could not open meta.yml for writing: $!";
    print $meta_fh YAML::Dump(\%meta_info);
    close($meta_fh);


    # now tar up the archive
    my $cwd = Cwd::getcwd();
    chdir($temp_dir) or die "Could not change to directory $temp_dir: $!";
    $archive->add_files(glob('*'));
    chdir($cwd) or die "Could not change to directory $temp_dir: $!";

    my $output_file = 'smolder_test_run.tar.gz';
    $archive->write($output_file, 1);
    print "Test run complete. Archive file - $output_file\n" unless $quiet;
}

