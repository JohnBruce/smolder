=head1 NAME

smolder

=head1 DESCRIPTION

This document describes the design goals and thoughts on a web-based repository
of smoke test results for a software project.

=head1 WHY

On a recent project I spent some time working on the test framework and getting
a dedicated server to nightly run the full smoke/regression tests. These tests
ran and created an HTML report that was then mailed out to the all of the developers.
Each morning was started by opening their email client and quickly reading this colorful
and easy to see report.

As the project grew, so did this report. After it reached 4986 tests the report
was 510k of HTML.
Even on a good machine, it took email clients a long time to render. Even when
everything was ok (all tests passed) all developers still got this report and
some only wanted to see it when something failed (I guess they didn't like all
the pretty green squares).

I thought, wouldn't it be nice if each developer could log into something and
change their preference for how they want to view this report? Maybe just receive
an email when something fails; Or just receive a link to a website where they
can not only see the normal report, but drill down to more details; Or not receive 
anything? What if these results were kept over a period of time and then viewable
in aggregate/summary? What if you were working on multiple projects and could do
the same for all of them? Could this tool also handle test coverage information?

=head1 GOALS

=over

=item * 

Collect test results that may come from multiple machines, from multiple
architectures, from multiple developers and for multiple projects.

=item * 

Allow developers to customize how they receive test reports and anything
else that we can. I want developers to have to change as little as possible
from the way they want things done.

=item *

3 levels of user permissions:

=over

=item * Installation Admin

Create projects and add users. 
Is also a Developer.

=item * Project Admin

Control details of a project and add existing users to a project. 
Is also a Developer.

=item * Developer

Controls individual preferences that are broken out by project. This
includes email behavior and anything else we can think of.

=back

=item *

Show as much data as possible (or desired). This includes the following reports:

=over

=item 1 - By project summary of most recent test results

=item 2 - Detailed view of each test result, showing all test files run and which tests passed or failed. (My Current test report).

=item 3 - Drill down from the above report to see more verbose listing of each file, or the reason for a test failure.

=item 4 - Coverage report that can be drilled into

=item 5 - Graphs showing progression over time of 

=over

=item * test suite size (number of tests)

=item * time to run

=item * percentage of pass/fail

The most common graphs will be generated in batch processes every time the data changes.
The un-common graphs will be created on the fly.

=back

=item 6 - Be able to search test results by date, architecture, and developer

=back

=item *

Nice look a feel. Simple, but modern.

=back

=head1 WORKFLOW

The testers would be encouraged to run their tests, automatically and periodically.
We will provide scripts to at least convert TAP to TAML, and upload it to a running
instance of smolder. Remember, the goal is to change as little as possible about their
existing project structure, so we probably don't want to actually run their tests for
them (since this might require other steps other than simply calling test.pl, etc).

The user (or script) would log in and upload the XML file to smolder, which would collate
it with the others from the same project, create the detailed reports for that run, collect 
the aggregate data into the database, generate the graphs, and then send out any desired 
emails.

At any time a developer can log in and look at his project's statistics.

=head1 DESIGN

=head2 In General

Re-use as much code as possible, and change as little about how each project's test suite
is run. Keep to standard Perl testing practices and tools.

=head2 Specifically

=over

=item * Use matchstick (L<https://matchstick.sourceforge.net>). 

This is based on the Krang (L<https://krang.sourceforge.net>) 
build/upgrade/install/run system and allows full encapsulation of the project
so that as little effort is needed to install and run an application. The project
is bundled with Apache (1.3.x) and mod_perl (1.29), all needed Perl modules and
other needed binaries.

Matchstick is a brand new project that needs a kick-start to get going. I think
this would be a great way to start it.

=item * Use TAP (defined in L<Test::Harness::TAP>)

Maybe even use a markup language based around TAP (I<TAML>?)so that test reports include
other information like:

=over

=item * Date Run

=item * Time to run

=item * Developer name

=item * Architecture

=back

Maybe even make this a micro-format and not a full blown XML language.

If I<TAML> doesn't pan out as a good idea, then just collect this information
from the user when they upload the data.

=item MVC

=over

=item Class::DBI

=item Template Toolkit

=item CGI::Application (and as many plugins as makes sense)

=back

=item Use L<Test::TAP::HTMLMatrix> for report #2 and #3

Change look and feel with style-sheet to match look and feel of smolder.

=item Use L<Devel::DProf> for report #4

Change look and feel with style-sheet to match look and feel of smolder.

=item Judicious use of AJAX technologies to make the user experience pleasant.

Use Prototype, Script.aculo.us, and Behaviour JS libraries.

=item Completely separate out the visual design into style-sheets

When in doubt, put it in the style-sheet. This include images and javascript
(behaviours). This means we can have design people not have to look at internals
and vice versa, and makes the project completely skinnable for other organizations
for their internal use, or so external projects can have this tool look like their
current dev site.

=item mod_auth_tkt For Auth

C Module that will be built into Apache provides ticket (group) based authentication
in a speedy manner. This will also let us limit the images (graphs/charts) that can 
be seen to only the project to which they belong and will allow authentication to
occur at the proxy level if we ever decide to go with a built-in proxy.

=item Built in scheduler daemon

Similar to Krang, there will be a built-in daemon running that will pull scheduled
jobs from the database to run. These job can be set as periodic, or one time occurrences.
This will (at least at first) be a single threaded daemon to reduce the complexity
of concurrent access.

=back




