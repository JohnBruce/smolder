=head1 Running Your Test Suite

Smolder tries as hard as possible to not dictacte how you
write or structure your tests. It even tries hard not to
care how you run your tests too much. But it does need some
help to get the right information in the right format.

=head2 TAP

Smolder relies on TAP (the Test Anything Protocol) as the
source of this data. If your project is in Perl, then it's 
as simple as using C<Test::More> and friends in your testing
scripts. Other languages also have libraries to output TAP.

A TAP stream correlates to a single test file, so we need to collect
multiple TAP streams together to represent a single test run.  We do
this by using a TAP Archive file (more details in 
L<Smolder's Test Report File Format|docs/upload_file_format.pod>) which
is basically a F<.tar.gz> file containing multiple F<.tap> files.

=head2 Running

=head3 smolder_prove

The easiest way to run your tests for Smolder is to use 
L<smolder_prove|bin/smolder_prove>. It works just like the normal
C<prove> that comes with L<Test::Harness> except that it will also
create a TAP Archive file of the test run.

    $ smolder_prove --tap-archive

=head3 SmokeRunner::Multi

Sometimes you have many different projects or different branches of the
same project that you would like to test from an SVN source checkout.
L<SmokeRunner::Multi> was designed for just this purpose.

It can be used simply to run tests and output them to your screen, or
create TAP archive and even automatically upload it to a running Smolder
server.

=head2 Uploading to Smolder

The easiest way to automate the uploading of test results to a running
Smolder is to use L<smolder_smoke_signal|bin/smolder_smoke_signal>. It
takes an XML or YAML file and uploads it to the Smolder server of your
choice.

    smolder_smoke_signal --server smolder.foo.com \
       --username myself --password s3cr3t --file test_report.xml \
       --project MyProject

=head2 Altogether Now

Typically, your automated test/upload code can be a bash script as simple
as this:

    !#/bin/bash
    smolder_prove --tap-archive
    smolder_smoke_signal --server smolder.foo.com \
       --username myself --password s3cr3t --file test_run.tar.gz \
       --project MyProject

Pretty easy.

=head2 Full Diagnostic Messages

Many times a failing test will output diagnostics messages giving more
information (ie, expected vs. received return values, etc). In Perl tests there
is a slight problem with capturing this output. Smolder would
be able to capture this reliably if it weren't for a legacy design decision
in L<Test::Builder>, which is used by almost every testing class in Perl.

To get around this, you need to inform L<Test::Builder> that diagnostic
output should go to the same output stream as normal TAP output. The following
code accomplishes this:

    use Test::Builder;
    sub import {
        no warnings;
        *Test::Builder::failure_output = sub { return \*STDOUT };
    }

Now, it would be pretty annoying and repetitive to put this at the top of
every test file in your project. A better way would be to create a package
for your project that contains this, and then use that package in all your test
scripts.

Something like this:

    package MyProject::TestScript;
    use Test::Builder;
    sub import {
        no warnings;
        *Test::Builder::failure_output = sub { return \*STDOUT };
    }
    1;

And then in your testfile F<t/foo.t> you would have something like this:

    use script;
    use warnings;
    use Test::More;
    use MyProject::TestScript;

    
   
