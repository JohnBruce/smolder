=head1 Running Your Test Suite

Smolder tries as hard as possible to not dictacte how you
write or structure your tests. It even tries hard not to
care how you run your tests too much. But it does need some
help to get the right information in the right format.

=head2 TAP

Smolder relies on TAP (the Test Anything Protocol) as the
source of this data. If your project is in Perl, then it's 
as simple as using C<Test::More> and friends in your testing
scripts. Other languages also have libraries to output TAP.

A TAP stream correlates to a single test file, so we need to collect
multiple TAP streams together to represent a single test run.  We do
this by using a TAP Archive file (more details in 
L<Smolder's Test Report File Format|docs/upload_file_format.pod>) which
is basically a F<.tar.gz> file containing multiple F<.tap> files.

=head2 Running

=head3 runtests

The easiest way to run your tests for Smolder is to use 
the C<runtests> script that comes with the L<TAP::Harness> Perl module.
It has a C<--archive> option that tells it to generate an archive
of the TAP files.

    $ runtests --archive my_test_run.tar.gz
or
    $ runtests --archive my_test_run.tar
or
    $ runtests --archive my_test_run.zip

=head3 Full Diagnostic Messages

Many times a failing test will output diagnostics messages giving more
information (ie, expected vs. received return values, etc). TAP output
is expected to be on STDOUT, but diagnostic information is usually on STDERR.
To capture all of this, simply use the C<--merge> flag for C<runtests>.

=head3 SmokeRunner::Multi

Sometimes you have many different projects or different branches of the
same project that you would like to test from an SVN source checkout.
The Perl module L<SmokeRunner::Multi> was designed for just this purpose.

It can be used simply to run tests and output them to your screen, or
create TAP archive and even automatically upload it to a running Smolder
server.

=head3 Buildbot

Buildbot (http://buildbot.net) is a neat Python tool that makes creating
a build farm nice and easy. With it you can setup a master build server
that has multiple slave build servers (running different platforms and 
architectures). This is overkill for lots of scenarios, but is really
nice if your project needs to run on lots of systems.

Having Buildbot submit the test results is essentially the same as anything
else. You need to create a TAP archive and have it uploaded to Smolder.

=head2 Uploading to Smolder

The easiest way to automate the uploading of test results to a running
Smolder is to use L<smolder_smoke_signal|bin/smolder_smoke_signal>. It
takes a TAP archive file and uploads it to the Smolder server of your
choice.

    smolder_smoke_signal --server smolder.foo.com \
       --username myself --password s3cr3t --file test_report.tar.gz \
       --project MyProject

Or you can use the C<LWP> Perl library directly

    LWP::UserAgent->new()->post(
        'http://smolder.project.org',
        Content_Type => 'form-data',
        Content      => [
            architecture => '386',
            platform     => 'Linux',
            comments     => $comments,
            username     => 'my-user',
            password     => 's3cr3t',
            report_file  => ['tap_archive.tar.gz'],
        ]
    );

=head2 Altogether Now

Typically, your automated test/upload code can be a bash script as simple
as this:

    !#/bin/bash
    runtests --archive test_run.tar.gz
    smolder_smoke_signal --server smolder.foo.com \
       --username myself --password s3cr3t --file test_run.tar.gz \
       --project MyProject

Pretty easy.

